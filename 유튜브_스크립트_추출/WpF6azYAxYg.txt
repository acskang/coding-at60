[{"text": "Have you ever walked into a room where the color scheme was", "start": 2.25, "duration": 2.333}, {"text": "despair and the layout was chaos?", "start": 4.583, "duration": 2.875}, {"text": "There are people who can fix this-- decorators.", "start": 7.458, "duration": 3.458}, {"text": "Have you ever encountered a function that was littered", "start": 10.916, "duration": 2.0}, {"text": "with boilerplate code and reinvented wheels?", "start": 12.916, "duration": 3.292}, {"text": "There are tools that can fix this-- decorators.", "start": 16.208, "duration": 3.583}, {"text": "In Python, a decorator is a function", "start": 19.791, "duration": 2.167}, {"text": "that sprinkles magic across other functions and classes.", "start": 21.958, "duration": 3.667}, {"text": "This makes it easy to extract common commands", "start": 25.625, "duration": 2.791}, {"text": "and pack them together into a single reusable function.", "start": 28.416, "duration": 3.667}, {"text": "Today, we will redecorate some Python code", "start": 32.083, "duration": 2.667}, {"text": "and show you how to make your repo a more beautiful place.", "start": 34.75, "duration": 4.583}, {"text": "A decorator is a command in Python", "start": 42.0, "duration": 2.0}, {"text": "that starts with an @ symbol.", "start": 44.0, "duration": 2.333}, {"text": "Decorators are used before functions, ", "start": 46.333, "duration": 2.333}, {"text": "classes,", "start": 48.666, "duration": 1.0}, {"text": "or methods.", "start": 49.666, "duration": 1.459}, {"text": "A decorator in front of a function", "start": 51.125, "duration": 1.375}, {"text": "is called a function decorator.", "start": 52.5, "duration": 3.0}, {"text": "When a decorator is in front of a class,", "start": 55.5, "duration": 1.5}, {"text": "we call it a class decorator.", "start": 57.125, "duration": 3.0}, {"text": "And while not as common, you can put a decorator", "start": 60.125, "duration": 2.583}, {"text": "in front of a method and call it a method decorator.", "start": 62.708, "duration": 4.0}, {"text": "Decorators change the behavior of functions and classes", "start": 66.708, "duration": 2.958}, {"text": "without you having to change the code.", "start": 69.666, "duration": 2.292}, {"text": "For example, in this lesson, ", "start": 71.958, "duration": 2.125}, {"text": "we will create a decorator called timer, ", "start": 74.083, "duration": 2.75}, {"text": "which will make it easy to measure the execution speed of a function.", "start": 76.833, "duration": 3.625}, {"text": "The @ notation is an example of syntactic sugar.", "start": 80.916, "duration": 3.834}, {"text": "Syntactic sugar is not a coffee additive.", "start": 85.208, "duration": 2.792}, {"text": "It is a programming additive, ", "start": 88.0, "duration": 1.75}, {"text": "syntax that makes code easier to read and write.", "start": 89.75, "duration": 3.833}, {"text": "You may be thinking: \"How does Python perform this trick?\"", "start": 93.583, "duration": 3.708}, {"text": "You may also be thinking: \" The correct word is illusion\".", "start": 97.291, "duration": 3.875}, {"text": "A magician never reveals their secrets.", "start": 101.166, "duration": 2.5}, {"text": "I am not a magician.", "start": 103.666, "duration": 1.792}, {"text": "So let us go inside Python to learn the secret of decorators.", "start": 105.458, "duration": 3.25}, {"text": "In Python, functions and classes are first class citizens.", "start": 110.291, "duration": 3.459}, {"text": "In programming language design, the term \u201cfirst class citizen\u201d ", "start": 114.208, "duration": 4.292}, {"text": "means anything that can be passed around like regular data types.", "start": 118.5, "duration": 3.458}, {"text": "For example, in Python, you can create a function called \u201ccompose\u201d", "start": 122.375, "duration": 5.0}, {"text": "where the first argument is a function, ", "start": 127.375, "duration": 1.958}, {"text": "the second argument is a function, ", "start": 129.333, "duration": 1.75}, {"text": "and the third argument is a variable.", "start": 131.083, "duration": 2.167}, {"text": "We can then call \u2018compose\u2019 ", "start": 133.875, "duration": 2.208}, {"text": "and pass in the print and length functions, and a string.", "start": 136.083, "duration": 3.333}, {"text": "When we run..", "start": 140.083, "duration": 1.208}, {"text": "..the function prints the length of our string.", "start": 141.791, "duration": 2.625}, {"text": "We passed in 3 arguments: two were functions, one was a string.", "start": 144.708, "duration": 4.625}, {"text": "You may be asking your monitor, \u201cWhat does this have to do with decorators?\u201d", "start": 149.916, "duration": 4.334}, {"text": "Before I answer that question, let us see another clever feature of Python.", "start": 154.791, "duration": 4.375}, {"text": "Functions in Python are like birds \u2013 they can be nested.", "start": 160.666, "duration": 3.334}, {"text": "Here is a comical yet suitable example.", "start": 164.583, "duration": 2.375}, {"text": "The function random_power will return one of three functions at random. ", "start": 167.666, "duration": 4.5}, {"text": "A square function, a cube function, or a fourth power function.", "start": 172.75, "duration": 4.25}, {"text": "Notice that we define three functions inside the random_power function.", "start": 177.916, "duration": 3.875}, {"text": "These are called nested functions.", "start": 182.416, "duration": 2.209}, {"text": "We could simply not test this function", "start": 184.791, "duration": 2.042}, {"text": "and assume it will all work according to plan.", "start": 186.833, "duration": 2.75}, {"text": "Or we can test it.", "start": 189.791, "duration": 1.709}, {"text": "Let us test it..10 times.", "start": 191.5, "duration": 2.5}, {"text": "Each time, get a random_power function and evaluate it at 3.", "start": 194.791, "duration": 3.917}, {"text": "Run.", "start": 199.75, "duration": 1.166}, {"text": "I am convinced.", "start": 201.541, "duration": 1.375}, {"text": "We have established that in Python, ", "start": 203.875, "duration": 2.0}, {"text": "functions are first-class citizens that can be nested.", "start": 205.875, "duration": 3.333}, {"text": "Now let us use these capabilities to create", "start": 209.208, "duration": 2.375}, {"text": "a decorator called timer.", "start": 211.583, "duration": 2.667}, {"text": "Here is a function that computes the prime factorization of a positive integer.", "start": 214.25, "duration": 4.375}, {"text": "How would you measure the execution speed of this function?", "start": 219.25, "duration": 2.708}, {"text": "One way would be to import the time module..", "start": 222.583, "duration": 3.208}, {"text": "Record the time when the function starts..", "start": 225.791, "duration": 2.667}, {"text": "Record the time when the function stops..", "start": 228.458, "duration": 2.417}, {"text": "And then print the difference.", "start": 230.875, "duration": 2.541}, {"text": "Let us test this on a handful of large integers.", "start": 233.416, "duration": 4.084}, {"text": "Run.", "start": 237.5, "duration": 0.791}, {"text": "This works.", "start": 239.541, "duration": 1.0}, {"text": "But this approach to timing is inflexible.", "start": 240.75, "duration": 2.583}, {"text": "The timing code would have to be added to each function you want to time.", "start": 243.625, "duration": 3.333}, {"text": "Then when you are done, this extra code would need to be removed.", "start": 247.458, "duration": 3.5}, {"text": "We will instead use a more flexible and general approach.", "start": 251.541, "duration": 3.917}, {"text": "First, rewind..", "start": 255.833, "duration": 1.708}, {"text": "Remove the timing code from the prime factorization function.", "start": 257.916, "duration": 3.417}, {"text": "Initiating better approach..", "start": 261.833, "duration": 1.792}, {"text": "Create a function called timer that takes any function f", "start": 263.916, "duration": 4.292}, {"text": "and returns a new function that includes code for measuring execution time.", "start": 268.208, "duration": 4.167}, {"text": "The wrapper function is a nested function.", "start": 273.083, "duration": 3.125}, {"text": "This inner function has two parts.", "start": 276.416, "duration": 2.542}, {"text": "The first part evaluates f using the arguments and returns the result.", "start": 278.958, "duration": 4.375}, {"text": "The other lines measure the start and stop times", "start": 284.708, "duration": 3.042}, {"text": "and then prints the elapsed time.", "start": 287.75, "duration": 2.666}, {"text": "Finally, we return the wrapper function", "start": 290.416, "duration": 2.875}, {"text": "like we would return any other value.", "start": 293.291, "duration": 2.709}, {"text": "This function has it all.", "start": 296.166, "duration": 2.459}, {"text": "It treats functions as first-class citizens", "start": 298.625, "duration": 2.458}, {"text": "by accepting a function as an input", "start": 301.083, "duration": 2.208}, {"text": "and returning a new function as the output.", "start": 303.291, "duration": 2.917}, {"text": "And there is a nested function.", "start": 306.208, "duration": 2.125}, {"text": "We can use timer to create a new function called", "start": 309.041, "duration": 3.292}, {"text": "prime factorization timer.", "start": 312.333, "duration": 2.583}, {"text": "When we use this new function, ", "start": 314.916, "duration": 1.834}, {"text": "we get both the time required and the output of the prime factorization function.", "start": 316.75, "duration": 4.833}, {"text": "This is an improvement ", "start": 322.125, "duration": 1.583}, {"text": "because we didn't have to change the original function at all.", "start": 323.708, "duration": 2.833}, {"text": "Better still, ", "start": 326.916, "duration": 1.042}, {"text": "we can use this timer function on any function.", "start": 327.958, "duration": 3.792}, {"text": "Win, win.", "start": 331.75, "duration": 0.958}, {"text": "Plus, plus.", "start": 333.541, "duration": 1.125}, {"text": "But we still had to write throwaway code.", "start": 335.5, "duration": 2.25}, {"text": "That increases my sadness level to 2.9.", "start": 338.333, "duration": 2.917}, {"text": "This is where the decorator syntax saves the day..", "start": 342.208, "duration": 2.875}, {"text": "and the night.", "start": 345.583, "duration": 0.667}, {"text": "Put the @timer decorator in front of the prime factorization function.", "start": 347.333, "duration": 4.25}, {"text": "Now, when you call the prime factorization function,", "start": 352.25, "duration": 3.041}, {"text": "Python will wrap it in the timer function for you.", "start": 355.625, "duration": 2.458}, {"text": "Run.", "start": 358.458, "duration": 0.708}, {"text": "That syntactic sugar is definitely sweet.", "start": 359.916, "duration": 3.5}, {"text": "Let us see this process again, ", "start": 364.041, "duration": 2.167}, {"text": " but in a more abstract way.", "start": 366.208, "duration": 1.708}, {"text": "A decorator is a function that accepts a function", "start": 368.458, "duration": 2.542}, {"text": "and returns a function.", "start": 371.0, "duration": 1.291}, {"text": "Inside the decorator function, you build a new nested function.", "start": 372.708, "duration": 3.5}, {"text": "Finally, you return the new function.", "start": 376.625, "duration": 2.916}, {"text": "When building this nested function,", "start": 379.791, "duration": 1.834}, {"text": "people often use this notation to handle all possible arguments.", "start": 381.625, "duration": 3.875}, {"text": "'args' is a tuple of positional arguments.", "start": 386.083, "duration": 2.958}, {"text": "And 'kwargs' is a dictionary of keyword arguments.", "start": 389.75, "duration": 4.333}, {"text": "To augment any function with this decorator,", "start": 394.083, "duration": 2.375}, {"text": "use the @ notation.", "start": 396.458, "duration": 2.083}, {"text": "Now, whenever you call the function,", "start": 398.875, "duration": 1.791}, {"text": "Python will actually execute this code.", "start": 400.875, "duration": 2.666}, {"text": "Here is a different way to see how Python interprets", "start": 404.166, "duration": 2.584}, {"text": "the decorator notation.", "start": 406.75, "duration": 2.083}, {"text": "Python has a module named 'functools',", "start": 410.208, "duration": 3.0}, {"text": "which comes with a collection of function tools.", "start": 413.208, "duration": 2.708}, {"text": "'func tools'.. 'function tools'.", "start": 415.916, "duration": 3.167}, {"text": "There is a connection there that eludes my nets.", "start": 419.25, "duration": 2.666}, {"text": "Some of these tools are decorators, like cache and wraps.", "start": 422.291, "duration": 4.084}, {"text": "Many people use cache to buy wraps to save time.", "start": 426.375, "duration": 3.541}, {"text": "And many programmers cache their wraps to save time.", "start": 429.916, "duration": 3.25}, {"text": "Since time is finite, we will not explore every decorator in this module.", "start": 433.166, "duration": 4.417}, {"text": "But we will explore these two.", "start": 438.125, "duration": 2.541}, {"text": "Imagine a simple function that uses the 'catch-all' approach to arguments.", "start": 442.416, "duration": 4.125}, {"text": "This function will print args and keyword args.", "start": 446.75, "duration": 3.458}, {"text": "Call this function.", "start": 450.416, "duration": 1.25}, {"text": "You will see that args contains a tuple of all positional arguments.", "start": 452.375, "duration": 4.25}, {"text": "'kwargs' is a dictionary with the named arguments.", "start": 456.625, "duration": 4.0}, {"text": "You can also access the name of the function and the doc string with the name and doc special attributes.", "start": 460.625, "duration": 5.916}, {"text": "Run.", "start": 467.166, "duration": 0.75}, {"text": "Now watch what happens if we create a do nothing decorator", "start": 468.708, "duration": 3.542}, {"text": "and apply it to our function.", "start": 472.25, "duration": 1.583}, {"text": "Run.", "start": 474.375, "duration": 0.791}, {"text": "Concern rising .", "start": 476.083, "duration": 1.792}, {"text": "Our carefully crafted function name and doc string are gone.", "start": 478.583, "duration": 3.667}, {"text": "We can recover them with the wraps decorator.", "start": 482.625, "duration": 2.833}, {"text": "Apply it to the inner function with the outer function", "start": 485.833, "duration": 2.583}, {"text": "as an argument and run.", "start": 488.416, "duration": 2.0}, {"text": "Better.", "start": 490.916, "duration": 0.875}, {"text": "By the way, notice the wraps decorator accepts an argument.", "start": 492.458, "duration": 4.583}, {"text": "This is a very important thing to notice.", "start": 497.041, "duration": 2.625}, {"text": "It is possible to design a decorator that", "start": 499.916, "duration": 2.0}, {"text": "accepts arguments to modify the behavior of the decorator.", "start": 501.916, "duration": 4.0}, {"text": "An argument to modify a decorator that", "start": 506.125, "duration": 2.041}, {"text": "modifies a class or function.", "start": 508.166, "duration": 2.542}, {"text": "Can we go deeper?", "start": 511.041, "duration": 1.125}, {"text": "Should we go deeper?", "start": 512.666, "duration": 1.625}, {"text": "The cache decorator in the func tools module provides a function with memoization.", "start": 515.333, "duration": 5.042}, {"text": "This is an optimization technique that caches function calls to avoid repeated calculations.", "start": 521.125, "duration": 5.375}, {"text": "A classic example for demonstration purposes", "start": 527.041, "duration": 2.75}, {"text": "is the Fibonacci sequence.", "start": 529.791, "duration": 1.625}, {"text": "This is the sequence that starts with a pair of ones.", "start": 532.0, "duration": 3.125}, {"text": "Every additional number is the sum of the previous two numbers.", "start": 535.666, "duration": 3.084}, {"text": "Here is a recursive function that", "start": 539.125, "duration": 1.541}, {"text": "computes the n-th term of the Fibonacci sequence.", "start": 540.666, "duration": 4.084}, {"text": "The first thing to do is to verify the input", "start": 544.875, "duration": 2.333}, {"text": "is a positive integer.", "start": 547.208, "duration": 1.458}, {"text": "Next, we handle the first two cases separately", "start": 549.041, "duration": 3.042}, {"text": "from the subsequent terms.", "start": 552.083, "duration": 1.583}, {"text": "If n is greater than 2, we compute the term recursively.", "start": 554.041, "duration": 4.042}, {"text": "Finally, check the first few values to confirm correctness.", "start": 558.333, "duration": 4.125}, {"text": "Run.", "start": 562.625, "duration": 0.625}, {"text": "If you try to use our timer decorator", "start": 565.125, "duration": 2.0}, {"text": "to measure execution speed, you will run into a problem.", "start": 567.125, "duration": 3.5}, {"text": "Run.", "start": 571.125, "duration": 0.791}, {"text": "Because the function is recursive,", "start": 572.708, "duration": 1.667}, {"text": "it displays the time required for each step.", "start": 574.666, "duration": 2.709}, {"text": "There is an easy workaround.", "start": 579.458, "duration": 1.542}, {"text": "Define a wrapper function that", "start": 581.208, "duration": 1.458}, {"text": "calls the Fibonacci function.", "start": 582.666, "duration": 2.042}, {"text": "And then time the wrapper function.", "start": 585.333, "duration": 2.583}, {"text": "Run.", "start": 593.833, "duration": 1.0}, {"text": "The later function calls take an observable amount of time to compute.", "start": 595.625, "duration": 4.083}, {"text": "We will now use the cache decorator", "start": 600.375, "duration": 2.125}, {"text": "on the Fibonacci function to see the benefits of caching.", "start": 602.5, "duration": 3.833}, {"text": "Run.", "start": 606.916, "duration": 0.667}, {"text": "The speed benefits are clear.", "start": 608.458, "duration": 2.208}, {"text": "To create a decorator, we wrote a wrapper function", "start": 611.708, "duration": 2.875}, {"text": "that added new features to a function.", "start": 614.583, "duration": 2.083}, {"text": "This inner function with additional features", "start": 617.041, "duration": 2.709}, {"text": "is returned by the wrapper function.", "start": 619.75, "duration": 2.083}, {"text": "The decorator syntactic sugar transforms this trick", "start": 622.791, "duration": 3.542}, {"text": "into highly readable code.", "start": 626.333, "duration": 1.375}, {"text": "But we do not have to stop here.", "start": 628.375, "duration": 1.791}, {"text": "It is possible to have one function nested inside another", "start": 630.625, "duration": 3.375}, {"text": "nested inside another.", "start": 634.0, "duration": 1.583}, {"text": "This is the approach used to create a decorator that accepts an argument.", "start": 635.916, "duration": 3.917}, {"text": "There is no limit to how deep we can go,", "start": 640.458, "duration": 1.583}, {"text": "but there are limits on the length of this video.", "start": 643.125, "duration": 2.416}, {"text": "Whenever you find yourself writing the same code over", "start": 646.75, "duration": 2.75}, {"text": "and over and over again and over again,", "start": 649.5, "duration": 3.791}, {"text": "you should stop and ask yourself, am I wrong?", "start": 653.291, "duration": 3.292}, {"text": "Am I right?", "start": 656.583, "duration": 0.833}, {"text": "How did I get here?", "start": 657.583, "duration": 0.958}, {"text": "Where does that highway go to?", "start": 658.833, "duration": 1.958}, {"text": "Because your code does not have", "start": 660.791, "duration": 1.292}, {"text": "to be the same as it ever was.", "start": 662.083, "duration": 2.292}, {"text": "The same as it ever was.", "start": 664.375, "duration": 1.416}]